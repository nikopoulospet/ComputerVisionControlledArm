% Auto-generated by cameraCalibrator app on 06-Oct-2020
%-------------------------------------------------------

%%blah
% Define images to process
imageFileNames = {'/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image1.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image2.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image3.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image4.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image5.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image6.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image7.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image8.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image9.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image10.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image11.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image12.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image13.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image14.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image15.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image16.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image17.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image18.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image19.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image20.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image22.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image23.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image24.png',...
    '/home/peter/src/RBE3001/RBE3001_Matlab05/pics/Image25.png',...
    };
% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);
if 1

    % View reprojection errors
    h1=figure; showReprojectionErrors(cameraParams);

    % Visualize pattern locations
    h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

    % Display parameter estimation errors
    displayErrors(estimationErrors, cameraParams);

    % For example, you can use the calibration data to remove effects of lens distortion.
    undistortedImage = undistortImage(originalImage, cameraParams);

    % See additional examples of how to use the calibration data.  At the prompt type:
    % showdemo('MeasuringPlanarObjectsExample')
    % showdemo('StructureFromMotionExample')
end
